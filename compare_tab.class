<script>

// When we first load there is a default choice for the thermostat, getYearRange will go find the valid year 
// ranges for its hvac data and use it to populate the two year drop downs for comparison
// We also want to determine how many tabs we should show.  For portrait devices (like a phone) we'll assume you just want to see
// the controls
// This doesn't really belong here!  It should go in a more generic place like thermo_runtime.js maybe?
window.onload = function() {
   getYearRange();
   setCookie('port_or_land', null);
   port_or_land();
}

// This gets called when first populating the two year drop downs or when a selection has been made in one or the other
// The first dropdown will always show all possible years except the most recent which only shows in the second drop down
// The second dropdown dynamically changes based on the first drop down to only show years later than that selected by the first one

// Note it will automatically change the second drop down if you make a choice in the first drop down that invalidates the currently
// selected year in the second drop down.  E.g. In a range from 2010-2020 if the second drop down is currently 2015 and I select 2018
// in the first drop down, the second drop down will change to 2019 and only show options for 2019 and 2020.

// Yes, I spent way too much time on "perfecting" the behavior and logic here.  But it was interesting!
function adjust_year_dropdowns(value)
{
   var dropdown_begin = document.getElementById("chart.compare.firstDate");
   var dropdown_begin_val = document.getElementById("chart.compare.firstDate").value;

   var dropdown_end = document.getElementById("chart.compare.secondDate");
   var dropdown_end_val = document.getElementById("chart.compare.secondDate").value;
   var highest_dde = 0;
   // console.log("ddb: "+dropdown_begin_val+" dde: "+dropdown_end_val);
   for (var i = 0; i < dropdown_end.length; i++) 
   {
      if (highest_dde < dropdown_end.options[i].value)
      {
         highest_dde = dropdown_end.options[i].value;
      }

      if (dropdown_end.options[i].value < dropdown_begin_val)
      {
         // If the second drop down's year is lower than the selected first dropdown, we don't want to offer it as an option so set it to "none"
         dropdown_end.options[i].style.display = "none";
      }
      else if (dropdown_end.options[i].value == dropdown_begin_val)
      {
         // We also don't want to show the value that is the same as the first drop down's current value
         dropdown_end.options[i].style.display = "none";

         // Additionally we want to make sure we don't leave the second drop down as the same, or lower, value as drop down 1
         // so if our starting state was the user trying to set the first drop down to a higher year than drop down 2, we
         // automatically push drop down 2's date to the year after drop down 1.  Double check there IS another year.  If not
         // just set drop down 2 to blank.  The use will have to adjust drop down 1 lower first.
         // Note that drop down 1 should only be allowed to go up to the "drop down 2 most recent year - 1"
         if (dropdown_begin_val >= dropdown_end_val)
         {
            if (i + 1 < dropdown_end.length)
            {
               document.getElementById("chart.compare.secondDate").value = dropdown_end.options[++i].value;
            }
            else
            {
               document.getElementById("chart.compare.secondDate").value = "";
            }
         }
      }
      else 
      {
         dropdown_end.options[i].style.display = "block";
      }
   }
   // We figured out the latest year in drop down 2 up above.  Don't show any options from drop down 1 that are equal, or higher than that year
   for (var i = 1; i < dropdown_begin.length; i++) 
   {
      if (dropdown_begin.options[i].value >= highest_dde)
      {
         dropdown_begin.options[i].style.display = "none";
      }
   }
   saveDateData('compare');
}

function displayCompareChartExec()
{
   var show_thermostat_id = 'id='                + document.getElementById( 'chart.compare.thermostat' ).value;
   var show_year_1        = 'show_year_1='       + document.getElementById( 'chart.compare.firstDate' ).value;
   var show_year_2        = 'show_year_2='       + document.getElementById( 'chart.compare.secondDate' ).value;

   // Browsers are very clever with image caching.  In this case it breaks the web page function.
   var no_cache_string = 'nocache=' + Math.random();

   var url_string = '';

   url_string = url_string + show_thermostat_id;
   url_string = url_string + '&' + show_year_1;
   url_string = url_string + '&' + show_year_2;
   url_string = url_string + '&' + no_cache_string;

   $.ajax({
           url: "gendata_compare.php",
           data: url_string,
           type: "post",
           success: function() {echart_compare_draw()}
          });
}

function getYearRange()
{
   // First use Ajax to go get the information from the database and update the two drop downs.  For some reason, 
   // calling update() directly from window.onload didn't seem to work so here's this small routine to do it
   update('get_year_range');
}

</script>

<?php
require_once( 'basic_tab.class' );

class Compare extends BasicTab
{
   public function __construct()
   {
      global $thermostats;
      global $thermostats_disabled;

      parent::__construct();

      $this->setTab('');

      $this->addToTab( "<div class='tab' id='compare'> <a href='#compare'> Compare </a>" );
      $this->addToTab( "   <div class='container' style='display: flex;flex-flow: column;width:100%'>" );
      $this->addToTab( "      <div class='tab-toolbar' style='text-align: center;width:100%'>" );
      $this->addToTab( "         <input type='button' onClick='javascript: displayCompareChartExec();' value='Show'>" );
      $this->addToTab( "         <select id='chart.compare.thermostat' onChange='javascript: getYearRange(); saveThermostat(\"compare\");''>" );

      /** Let user pick which thermostat to show, but NEVER show more than one of them!
       *
       * If the user saved his choice last time in a cookie, use that one, otherwise default to first one
       *
       * We want to allow comparisons with currently disabled thermostats too
       */
      foreach( array_merge($thermostats, $thermostats_disabled) as $thermostatRec )
      {
         $this->addToTab( "             <option " );
         if( isset($id) && $id == $thermostatRec['id'] )
         {
            $this->addToTab( "selected " );
         }
         $this->addToTab( "value='{$thermostatRec['id']}'>{$thermostatRec['name']}</option>" );
      }
      $this->addToTab( "         </select>" );

      /** These two compare dates need to be dynamically populated based on the thermostat selected
       *
       * So the select of thermostat either onChange or onBlur needs to use Ajax to choose new values for first and second dates.
       *
       */
      $this->addToTab( "         Compare <select size=1 id='chart.compare.firstDate' onChange='javascript: adjust_year_dropdowns();saveDateData(\"compare\");'></select>");
      $this->addToTab( "         to <select size=1 id='chart.compare.secondDate' onChange='javascript: adjust_year_dropdowns();saveDateData(\"compare\");'></select>");

      $this->addToTab( "      </div>" );

      $this->addToTab( "      <span class='thermo_chart' id='compare_echart' style='flex: 1 1 auto;border:3px solid black'></span>");

      $this->addToTab( "      <script>" );
      $this->addToTab( "         loadDateData('compare');");
      $this->addToTab( "         loadThermostat('compare');");
      $this->addToTab( "         update('get_year_range', 'redraw');");
      $this->addToTab( "      </script>" );

      $this->addToTab( "   </div>" );
      $this->addToTab( "</div>" );

      $this->addToTab( "<div class='tab_gap'></div>" );
   }
}
?>

<script>
function echart_compare_draw()
{

$(document).ready(function(){
  $.ajax({
    url: "php/read_comp_data.php",
    method: "GET",
    success: function(mydata) {
      var my_array = JSON.parse(mydata);

      const label     = my_array.map(o => (o.Label));
      const hhours1   = my_array.map(o => o.HHours1);
      const hhours2   = my_array.map(o => o.HHours2);
      const hdegrees1 = my_array.map(o => o.HDeg1);
      const hdegrees2 = my_array.map(o => o.HDeg2);
      const chours1   = my_array.map(o => o.CHours1);
      const chours2   = my_array.map(o => o.CHours2);
      const cdegrees1 = my_array.map(o => o.CDeg1);
      const cdegrees2 = my_array.map(o => o.CDeg2);
      const year1     = my_array.map(o => o.Year1);
      const year2     = my_array.map(o => o.Year2);

      var chartDom = document.getElementById('compare_echart');
      var myChart = echarts.init(chartDom);

      myChart.dispose();
      myChart = echarts.init(chartDom, get_current_theme());

      var option;

      var total_heat1 = (hhours1.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var total_heat2 = (hhours2.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var total_cool1 = (chours1.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var total_cool2 = (chours2.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);

      var heat_degrees1 = (hdegrees1.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var heat_degrees2 = (hdegrees2.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var cool_degrees1 = (cdegrees1.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);
      var cool_degrees2 = (cdegrees2.reduce(function(a, b) { return Number(a) + Number(b); }, 0)).toFixed(1);

option = {
   title: {
      left: 'center',
      text: 'HVAC Runtimes comparing '+year1[0]+' and '+year2[0]+'\n '+year1[0]+' Heat Hours: '+total_heat1+' Heat Degrees: '+heat_degrees1+' Cool Hours: '+total_cool1+' Cool Degrees: '+cool_degrees1+'\n '+year2[0]+' Heat Hours: '+total_heat2+' Heat Degrees: '+heat_degrees2+' Cool Hours: '+total_cool2+' Cool Degrees: '+cool_degrees2  
  },
      legend: {
      orient: 'horizontal',
      data: ['Heat Hours '+year1[0], 'Cool Hours '+year1[0], 'Heat Degrees '+year1[0], 'Cool Degrees '+year1[0]],
      selected: { 'Heat Hours' : true, 'Heat Degrees' : true , 'Cool Hours' : false, 'Cool Degrees' : false},
      bottom: 53,

      // This formatter allows us to manage two different series with a single name
      formatter: (name) => {
         if (name == 'Heat Hours '+year1[0])
            return 'Heat Hours';
         else if (name == 'Cool Hours '+year1[0])
           return 'Cool Hours';
         else if (name == 'Heat Degrees '+year1[0])
           return 'Heat Degrees';
         else if (name == 'Cool Degrees '+year1[0])
           return 'Cool Degrees';
         else
           return name;
      },
   },
   grid: {
      show: true,
      bottom: 95,
      left: '5%',
      right: '5%',
      top: '18%',
   },
   toolbox: {
      top: 6,
      orient: 'vertical',
      itemSize: 10,
      feature: {
         dataZoom: {
           yAxisIndex: 'none'
         },
         restore: {},
         saveAsImage: {}
      },
   },
   /////  X Axis /////
   xAxis: {
      type: 'category',
      data: label,
   },
   /////  Y Axis /////
   yAxis: [
      {
         type: 'value',
         name: "Degrees",
         alignTicks: true,
         axisLabel: {
            formatter: function (value) { if (value == value.toFixed(0)) {return value} else { return value.toFixed(0) } },
         }
      },
      {
         type: 'value',
         name: "Runtime\nhours",
         alignTicks: true,
         axisLabel: {
            formatter: function (value) { if (value == value.toFixed(0)) {return value} else { return value.toFixed(0) } },
         }
      }   
   ],
   /////  Tooltop /////
   tooltip: {
      trigger: 'axis',
   },
   /////  Series /////
   series: [
      {
         /////  Series - Heat Runtime /////
         name: 'Heat Degrees '+year1[0],
         symbol: 'none',
         type: 'line',
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      hdegrees1[len]
                      ]);
           }
           return d;
         })(),
      },
      {
         /////  Series - Heat Runtime /////
         name: 'Heat Degrees '+year2[0],
         symbol: 'none',
         type: 'line',
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      hdegrees2[len]
                      ]);
            }
            return d;
         })(),
      },
      {
         /////  Series - Cool Degrees Year 1 /////
         name: 'Cool Degrees '+year1[0],
         symbol: 'none',
         type: 'line',
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      cdegrees1[len]
                      ]);
            }
            return d;
         })(),
      },
      {
         /////  Series - Cool Degrees Year 2 /////
         name: 'Cool Degrees '+year2[0],
         symbol: 'none',
         type: 'line',
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      cdegrees2[len]
                      ]);
            }
            return d;
         })(),
      },
      {
         /////  Series - Heat Hours 1 /////
         name: 'Heat Hours '+year1[0],
         type: 'bar',
         yAxisIndex: 1,
         lineStyle: {
            opacity: 0                 // hide line
         },
         itemStyle: {color: '#ff0000'},
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      hhours1[len]
                      ]);
            }
            return d;
         })()
      },
      {
         /////  Series - Heat Hours 2 /////
         name: 'Heat Hours '+year2[0],
         type: 'bar',
         yAxisIndex: 1,
         lineStyle: {
            opacity: 0                 // hide line
         },
         itemStyle: {color: '#d43030'},
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      hhours2[len]
                      ]);
            }
            return d;
         })()
      },
      {
         /////  Series - Cool Hours 1 /////
         name: 'Cool Hours '+year1[0],
         type: 'bar',
         yAxisIndex: 1,
         lineStyle: {
            opacity: 0                 // hide line
         },
         itemStyle: {color: '#0000ff'},
         data: (function () {
            var d = [];
            var len = 0;
            while (len++ < label.length) {
               d.push([
                      label[len],
                      chours1[len]
                      ]);
            }
            return d;
         })()
      },
      {
         /////  Series - Cool Hours 2 /////
         name: 'Cool Hours '+year2[0],
         type: 'bar',
         yAxisIndex: 1,
         lineStyle: {
            opacity: 0                 // hide line
         },
         itemStyle: {color: '#3030c4'},
          data: (function () {
             var d = [];
             var len = 0;
             while (len++ < label.length) {
                d.push([
                       label[len],
                       chours2[len]
                       ]);
             }
             return d;
          })()
      }
   ],
};

   option && myChart.setOption(option);

   // This helps us bundle multiple series under one legend item
   myChart.on('legendselectchanged', function(params) {
      suppressSelection(myChart, params, year1[0], year2[0]);
   });
   },
   error: function(data) {
      console.log(data);
   }
});

// Playing games with the legend and having multiple series behind what looks like a single item.
function suppressSelection(chart, params, year1, year2) {
   chart.setOption({ animation: false });

   if (params.name == 'Heat Hours '+year1)
   {
      if ( params.selected[params.name])
      {
         chart.dispatchAction({
                              type: 'legendSelect',
                              name: 'Heat Hours '+year2
                              });
      }
      else
      {
         chart.dispatchAction({
                              type: 'legendUnSelect',
                              name: 'Heat Hours '+year2
                              });
      }
   }
   if (params.name == 'Cool Hours '+year1)
   {
      if ( params.selected[params.name])
      {
         chart.dispatchAction({
                              type: 'legendSelect',
                              name: 'Cool Hours '+year2
                              });
      }
      else
      {
         chart.dispatchAction({
                              type: 'legendUnSelect',
                              name: 'Cool Hours '+year2
         });
      }
   }

   if (params.name == 'Heat Degrees '+year1)
   {
      if ( params.selected[params.name])
      {
         chart.dispatchAction({
                              type: 'legendSelect',
                              name: 'Heat Degrees '+year2
                              });
      }
      else
      {
         chart.dispatchAction({
                              type: 'legendUnSelect',
                              name: 'Heat Degrees '+year2
                              });
      }
   }
   if (params.name == 'Cool Degrees '+year1)
   {
      if ( params.selected[params.name])
      {
         chart.dispatchAction({
                              type: 'legendSelect',
                              name: 'Cool Degrees '+year2
                              });
      }
      else
      {
         chart.dispatchAction({
                              type: 'legendUnSelect',
                              name: 'Cool Degrees '+year2
                              });
      }
   }

   chart.setOption({ animation: true });
}

});
}

</script>
